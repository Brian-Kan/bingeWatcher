{"version":3,"sources":["firebase.js","UserList.js","Header.js","Main.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","UserList","props","react_default","a","createElement","className","showTitle","map","show","index","key","style","backgroundImage","concat","background","title","onClick","removeShow","Header","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomNumber","min","max","Math","floor","random","handleChange","event","setState","userInput","target","value","handleSearch","preventDefault","state","swal","icon","button","userQuery","userSearch","searchShows","axios","method","url","dataResponse","params","q","then","results","data","length","filteredData","filter","item","image","summary","showsArray","catch","error","handleKeyPress","e","showDetails","getAttribute","id","dataSummary","replace","showsInfo","handleDisplayModal","isModalShown","activeTrap","closeModal","openListCreator","isListCreatorShown","addToList","userTvShows","idArrayCopy","toConsumableArray","idArray","includes","push","info","titleArray","isEmptyList","showToRemove","splice","handleSubmitChange","userSubmitTitle","submitList","userConfirmedList","userList","database","ref","isSubmittedShown","_this2","starterShows","randNum","filteredStarterData","_this3","action","htmlFor","onChange","type","placeholder","lib_default","accessibility","adaptiveHeight","autoplay","autoplaySpeed","centerMode","dots","infinite","speed","slide","slidesToShow","slidesToScroll","swipeToSlide","variableWidth","src","original","alt","data-id","data-summary","data-title","name","data-image","onKeyPress","tabIndex","focus_trap_react_default","onSubmit","src_UserList","Component","Main","valueIncrease","closest","copy","displayList","parentDiv","keyValue","counter","userListObject","dbRef","once","response","newData","val","child","update","valueDecrease","currentVoteValue","on","newState","object","sortedArray","sort","b","list","data-key","Footer","href","App","src_Header","src_Main","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.05343b5f.chunk.js","sourcesContent":["import firebase from 'firebase';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCJuJHHf2txiuyxYODzn0GUzac1Ewtx5Zw\",\n    authDomain: \"superduperlatives.firebaseapp.com\",\n    databaseURL: \"https://superduperlatives.firebaseio.com\",\n    projectId: \"superduperlatives\",\n    storageBucket: \"superduperlatives.appspot.com\",\n    messagingSenderId: \"91289186734\",\n    appId: \"1:91289186734:web:ff796a4e3ea069f3\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase","import React from 'react';\n\n// prints user's selected TV shows to the page\nconst UserList = (props) => {\n    return (\n        <ul className=\"showSelection\">\n            {props.showTitle.map((show, index) => {\n                return (\n                    <li key={index} className=\"titleVoteContent2\" style={{ backgroundImage: `url(${show.background})` }}>\n                        <div className=\"overlay\"></div>\n                        <h4>{show.title}</h4>\n                        <div className=\"removeWrapper\">\n                            <button\n                                className=\"removeButton\"\n                                onClick={() => props.removeShow(index)}>&#10006;\n                            </button>\n                        </div>\n                    </li>\n                )\n            })}\n        </ul>\n    )\n}\n\nexport default UserList;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport firebase from './firebase.js';\nimport UserList from './UserList.js';\nimport Slider from 'react-slick';\nimport swal from 'sweetalert';\nimport FocusTrap from 'focus-trap-react'\n\nclass Header extends Component {\n    constructor() {\n        super();\n        this.state = {\n            // binding input of search bar\n            userInput: \"\",\n            // storing our user's search input\n            userSearch: \"\",\n            // data gathered from API \n            showsArray: [],\n            // storing the data that will be printed to the DOM\n            showsInfo: {},\n            // controls the visibility of the modal\n            isModalShown: false,\n            // stores the TV shows that the user adds to their list\n            userTvShows: [],\n            // binding the input of user's list title\n            userSubmitTitle: \"\",\n            // stores the tv show ids of the user's list\n            idArray: [],\n            // controls the visibility of the list creator\n            isListCreatorShown: false,\n            // controls the default message of the list creator\n            isEmptyList: true,\n            // for accessibility \n            activeTrap: false\n        }\n    }\n    \n    // random number generator for listing tv shows \n    randomNumber = (min, max) => {\n        let num = Math.floor(Math.random() * (max - min)) + min;\n        return num;\n    }\n\n    // based on the random number generator, calls API with a random keyword to print TV shows to the DOM when the page loads\n    componentDidMount() {\n        const starterShows = ['comedy', 'food', 'horror', 'action', 'drama', 'love', 'anime', 'disney']\n        const randNum = this.randomNumber(0, starterShows.length)\n        // calls the API\n        axios({\n            method: 'GET',\n            url: \"https://api.tvmaze.com/search/shows\",\n            dataResponse: 'json',\n            params: {\n                q: starterShows[randNum]\n            }\n        }).then(results => {\n            // only want the results that have an image and summary\n            const filteredStarterData = results.data.filter(item =>\n                item.show.image != null && item.show.summary != null)\n            // store the filter data in state\n            this.setState({\n                showsArray: filteredStarterData\n            })\n\n        }).catch(error => {\n            swal({\n                title: \"Sorry! We failed to get data back from our API at this time. Please check back later!\",\n                icon: \"warning\",\n                button: \"Try Again\"\n            });\n        })\n    }\n\n    //binds the input\n    handleChange = event => {\n        this.setState({\n            userInput: event.target.value\n        })\n    }\n\n    // on click of the search button, stores user input in state and passes the user's input to the API call\n    handleSearch = event => {\n        event.preventDefault();\n        // error handling - checks if user has left search field blank and throws an alert\n        if (this.state.userInput === '') {\n            swal({\n                title: \"Don't leave the text field empty!!\",\n                icon: \"warning\",\n                button: \"Nice.\",\n            });\n        // if user has filled out the input, store user's search parameters in state and call API\n        } else {\n            const userQuery = this.state.userInput;\n\n            this.setState({\n                userSearch: userQuery\n            }, () => {\n                this.searchShows(this.state.userSearch)\n            })\n        }\n    }\n\n    // calls Api to get tv shows based on user's keyword search\n    searchShows = (userSearch) => {\n        axios({\n            method: 'GET',\n            url: \"https://api.tvmaze.com/search/shows\",\n            dataResponse: 'json',\n            params: {\n                q: userSearch\n            }\n        }).then(results => {\n            // if API cannot find any tv show matches based on user's search, ask user to search with another keyword\n            if (results.data.length === 0) {\n                swal({\n                    title: `Sorry, we couldn't find any shows based on your search. Please try searching by another keyword`,\n                    icon: \"warning\",\n                    button: \"Nice.\",\n                });\n            // if API call returns results, filter out data that do not have an image or summary.\n            } else {\n                const filteredData = results.data.filter(item =>\n                    item.show.image != null && item.show.summary != null);\n                // store the filtered list in state\n                this.setState({\n                    showsArray: filteredData\n                })\n            }  \n        }).catch(error => {\n            swal({\n                title: \"Sorry! We failed to get data back from our API at this time. Please check back later!\",\n                icon: \"warning\",\n                button: \"Try Again\"\n            });\n        })\n    }\n\n    // for accessibility - allows user to select a show on enter\n    handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            this.showDetails(e)\n        }\n    }\n\n    // on click of image, targets the specific data info for the clicked on show, stores the info in state and then calls the handleDisplayModal to print info on DOM\n    showDetails = (e) => {\n        const title = e.target.getAttribute(\"data-title\");\n        const id = e.target.getAttribute(\"data-id\");\n        const dataSummary = e.target.getAttribute(\"data-summary\");\n        const image = e.target.getAttribute(\"data-image\");\n\n        //regex to remove html tags embedded in tv show summaries\n        const summary = dataSummary.replace(/<[^>]+>/g, '');\n\n        this.setState ({\n            showsInfo: {\n                title,\n                id,\n                summary,\n                image\n            },\n        }, () => {\n            this.handleDisplayModal();\n        })\n    }\n\n    // shows the modal on the DOM \n    handleDisplayModal = () => {\n        this.setState({\n            isModalShown: true,\n            activeTrap: true\n        })\n    }\n\n    // on click, hides the modal from the DOM\n    closeModal = (e) => {\n        e.preventDefault();\n        this.setState({\n            isModalShown: false,\n            activeTrap: false\n        })\n    }\n\n    // on click, shows the list creator section on section on the DOM\n    openListCreator = (e) => {\n        e.preventDefault();\n        this.setState({\n            isListCreatorShown: true\n        })\n    }\n\n    // on click, takes user's selected TV show and adds the selected TV show's info to userTvShows array stored in state\n    addToList = (e) => {\n        e.preventDefault();\n\n        // if user has less than 10 TV shows on their list (limits the user to selecting 10 TV shows per list)\n        if (this.state.userTvShows.length < 10) {\n            // store TV show's id for error handling (to ensure that the user does not add same TV show to their list twice)\n            const idArrayCopy = [...this.state.idArray]\n\n            if (!idArrayCopy.includes(this.state.showsInfo.id)) {\n                idArrayCopy.push(this.state.showsInfo.id)\n            \n                // grabs the info about the clicked on show from showsInfo array in state\n                const showTitle = this.state.showsInfo.title\n                const showBackground = this.state.showsInfo.image\n\n                // assigns the TV show an initial value of 1 for voting system\n                const showValue = 1\n\n                // creates an object with TV show's title, value and image\n                const info = { title: showTitle, value: showValue, background: showBackground }\n\n                // makes copy of userTvShows to push user's selected TV show\n                const titleArray = [...this.state.userTvShows]\n                titleArray.push(info)\n\n                this.setState({\n                    userTvShows: titleArray,\n                    idArray: idArrayCopy,\n                    isListCreatorShown: true,\n                    isEmptyList: false\n                });\n            // if user has already added title to list, display sweet alert error\n            } else {\n                this.setState({\n                    isModalShown: false\n                });\n\n                swal({\n                    title: \"Whoops you already added this show to your list!\",\n                    icon: \"warning\",\n                    button: \"Nice.\",\n                });\n            }\n        // if user tries to add more than 10 shows to their list, display sweet alert error\n        } else {\n            this.setState({\n                isModalShown: false\n            });\n\n            swal({\n                title: \"You may only add up to 10 shows to your list!\",\n                icon: \"warning\",\n                button: \"Nice.\",\n            });\n        }\n    }\n\n    // removes a TV show off a user's list by passing in the index value of the show the user would like to remove\n    removeShow = (showToRemove) => {\n        // copy of user's TV show list to make modification\n        const showTitle = [...this.state.userTvShows]\n\n        // remove the TV show from the array\n        showTitle.splice(showToRemove, 1)\n\n        \n        const idArrayCopy = [...this.state.idArray]\n        \n        // remove the TV show from the idArray\n        idArrayCopy.splice(showToRemove, 1)\n        \n        // update state with the new array\n        this.setState ({\n            userTvShows: showTitle,\n            idArray: idArrayCopy\n        })\n    }\n\n    // binding the input of the user's list title\n    handleSubmitChange = (e) => {\n        this.setState({\n            userSubmitTitle: e.target.value\n        })\n    }        \n    \n    //on click, checks if the user completed the form correctly and then sends the user's completed list to firebase\n    submitList = (e) => {\n        e.preventDefault()\n        // error handling - checks if user has added more than one TV show and entered a titled\n        if (this.state.userTvShows.length !== 0 && this.state.userSubmitTitle !== '') {\n            const userChosenTitle = this.state.userSubmitTitle;\n\n            // takes user's entire list of TV shows and list title \n            const userConfirmedList = {\n                title: userChosenTitle,\n                userList: this.state.userTvShows\n            }\n            // reference to our firebase \n            const dbRef = firebase.database().ref();\n\n            // push user's completed list to firebase\n            dbRef.push(userConfirmedList)\n\n            // clears the array for next list \n            this.setState({\n                userTvShows: [],\n                userSubmitTitle: '',\n                isSubmittedShown: true,\n            })\n\n            // sweet alert confirmation that the user's list has been submitted and guides the user to check out the community lists\n            swal({\n                title: \"Thank you for submitting your list! Vote for your favorite shows on our community boards below!\",\n                icon: \"success\",\n                button: \"Nice.\",\n            })\n        // error handling - if user has not completed their list, display error message\n        } else {\n            swal({\n                title: \"Whoops! Looks like you didn't complete your list! Make sure to add at least one TV show and name your list.\",\n                icon: \"warning\",\n                button: \"Nice.\"\n            }); \n        }\n    }\n\n    render () {\n        // settings for react-slick carousel\n        const settings = {\n            accessibility: true,\n            adaptiveHeight: true,\n            autoplay: true,\n            autoplaySpeed: 3500,\n            centerMode: true,\n            dots: true,\n            infinite: true,\n            speed: 750,\n            slide: true,\n            slidesToShow: 1,\n            slidesToScroll: 1,\n            swipeToSlide: true,\n            variableWidth: true,\n        };\n\n        return (\n            <header className=\"hero wrapper\">\n                {this.state.isModalShown ?\n                    (<div className=\"heroOverlay\"></div>) : null \n                }\n\n                <div className=\"heroContent\">\n                    <div className=\"headerSearchBar animated fadeInUp\">\n                        <div className=\"appInfo\">\n                            <h1>TV Watchers</h1>\n                            <p className=\"slogan\">Make a TV show list for your next TV marathon</p>\n                        </div>\n                        \n                        <form action=\"\" className=\"searchForm\">\n                            <label htmlFor=\"searchBar\" className=\"visuallyHidden\">Search for TV shows</label>\n                            <input  \n                                id=\"searchBar\" \n                                onChange={this.handleChange}\n                                type=\"text\"\n                                placeholder=\"eg. transformers, top gear, brooklyn 99... \">\n                            </input>\n                            <input  \n                                onClick={this.handleSearch}\n                                type=\"submit\" \n                                value=\"Search\">\n                            </input>\n                        </form>\n                    </div>\n\n                    <div className=\"showLists animated fadeInUp\">\n                        <div className=\"showResults\">\n                            <Slider {...settings}>\n                                {this.state.showsArray.map ((item, key) => {\n                                    return <div key={item.show.id} className=\"showPoster\">\n                                        <img\n                                            src={item.show.image.original}\n                                            alt=\"\"\n                                            data-id={item.show.id}\n                                            data-summary={item.show.summary}\n                                            data-title={item.show.name}\n                                            data-image={item.show.image.original}\n                                            onClick={this.showDetails} \n                                            onKeyPress={this.handleKeyPress}\n                                            tabIndex=\"0\"\n                                        />\n                                    </div>\n                                })}\n                            </Slider>\n                        </div>\n                    </div>\n\n                    {this.state.isModalShown ? (\n                        <FocusTrap>\n                            <div className=\"modalWrapper\">\n                                <div className=\"showModal animated fadeIn\">\n                                    <div className=\"modalImage\">\n                                        <img\n                                            src={this.state.showsInfo.image}\n                                            alt={this.state.showsInfo.title}\n                                        />\n                                    </div>\n                                    <div className=\"modalText\">\n                                        <h2>{this.state.showsInfo.title}</h2>\n                                        <p>{this.state.showsInfo.summary}</p>\n                                        <div className=\"modalButtons\">\n                                            <button\n                                                className=\"clickAdd\"\n                                                onClick={this.addToList}>\n                                                Add to List\n                                            </button>\n                                            <button\n                                                className=\"clickClose\"\n                                                onClick={this.closeModal}>\n                                                &#xd7;\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </FocusTrap>\n                    ) : null}\n                    \n                    {this.state.isListCreatorShown ? (\n                        <div className=\"listCreator\">\n                            <div className=\"listWrapper animated fadeInUp\">\n                                <div className=\"formWrapper animated fadeInUp\" id=\"formWrapper\">\n                                    <form\n                                        className=\"listCreatorForm\"\n                                        action=\"\"\n                                        onSubmit={this.submitList}>\n                                        <input\n                                            id=\"userListTitle\"\n                                            onChange={this.handleSubmitChange}\n                                            type=\"text\"\n                                            value={this.state.userSubmitTitle}\n                                            placeholder=\"Name Your List\"\n                                        />\n                                        <label htmlFor=\"userListTitle\" className=\"visuallyHidden\">Name your TV show list</label>\n                                        <input\n                                            type=\"submit\"\n                                            value=\"Submit List\"\n                                        />\n                                    </form>\n                                    {this.state.isEmptyList ? (\n                                        <div className=\"emptyList\">\n                                            <p>You have not added any TV shows to your list yet.</p>\n                                            <p>Browse TV Shows by clicking on the titles and add to your list</p>\n                                        </div>) : null\n                                    }\n                                    <div className=\"userWrapper\">\n                                        <UserList\n                                            showTitle={this.state.userTvShows}\n                                            removeShow={this.removeShow}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>) : \n                        <button className=\"startCreator\" onClick={this.openListCreator}>Click here to Build Your List</button>\n                    }\n                </div>\n            </header>\n        )\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport swal from 'sweetalert';\n\nclass Main extends Component {\n    constructor(){\n        super()\n        this.state = {\n            displayList: [],\n        }\n    }\n\n    // pulling data from firebase\n    componentDidMount(){\n        // reference to our firebase\n        const dbRef = firebase.database().ref();\n        // on value change in firebase, get updated data from database\n        dbRef.on('value', (response) => {\n            // the data from firebase\n            const data = response.val()\n            \n            // an empty array to update the state\n            const newState = [];\n            \n            // for community voting - for every list stored in firebase, arranges the TV shows on each user's list by value (votes). After the list has been sorted, pushes the list back to firebase to be stored in new order \n            for (let object in data) {\n                let sortedArray = []\n                // sorts the array by value\n                sortedArray = data[object].userList.sort((a, b) => {\n                    if (a.value > b.value) return -1;\n                    if (a.value < b.value) return 1;\n                    return 0;\n                });\n                // pushes the newly sorted array to firebase\n                dbRef.child(object).update({\n                    userList: sortedArray\n                })\n            }\n            // grabs the user's submitted lists from firebase to store in state\n            for (let key in data) {\n                newState.push({\n                    id: key,\n                    userListObject: data[key]\n                })\n            }\n\n            this.setState({\n                displayList: newState\n            })\n        })\n    }\n\n    // on click, increases the value of specific TV show which updates in firebase so that the values can be sorted in display on the page by votes (values)\n    valueIncrease = (event) => {\n        // reference to the database\n        const dbRef = firebase.database().ref(); \n\n        // reference to specific user list in firebase\n        const firebaseKey = event.target.closest('.completeList').getAttribute('data-key');\n        \n        // copy of displayList in state to make modifications \n        const copy = [...this.state.displayList]\n        \n        // the following variables target the specific TV show on the specific list that the user would like to add a vote   \n        const target = event.target.value\n        const parentDiv = event.target.closest('.completeList').getAttribute('data-id');\n        const keyValue = event.target.closest('.completeList').getAttribute('data-key');\n\n        // grabs the current vote value\n        let currentVoteValue = copy[parentDiv].userListObject.userList[target].value;\n        \n        // increments the current vote value by 1 \n        const counter  = currentVoteValue + 1;\n        copy[parentDiv].userListObject.userList[target].value = counter;\n        \n        // updates the state with the new array\n        this.setState({\n            displayList: copy,\n        }, () => {\n            // after the state has been set, updates firebase with new vote values\n            const dbRef = firebase.database().ref()\n\n            dbRef.once('value', (response) => {\n                const newData = response.val()\n\n                for (let key in newData) {\n                    if (key === keyValue) {\n                        dbRef.child(key).child('userList').child(target).update({\n                            value: this.state.displayList[parentDiv].userListObject.userList[target].value\n                        }) \n                    }\n                }\n            })\n        })\n    }\n\n    // on click, decreases the value of specific TV show. Very similar to increase function.\n    valueDecrease = (event) => {\n        const firebaseKey = event.target.closest('.completeList').getAttribute('data-key');\n        const dbRef = firebase.database().ref();\n        const copy = [...this.state.displayList]\n        const target = event.target.value\n        const parentDiv = event.target.closest('.completeList').getAttribute('data-id');\n        const keyValue = event.target.closest('.completeList').getAttribute('data-key');\n\n        let currentVoteValue = copy[parentDiv].userListObject.userList[target].value;\n        const counter = currentVoteValue - 1;\n\n        // error handling so that user can not vote a TV show down to negative values\n        if (currentVoteValue > 0) {\n            copy[parentDiv].userListObject.userList[target].value = counter;\n            this.setState({\n                displayList: copy,\n            }, () => {\n                const dbRef = firebase.database().ref()\n\n                dbRef.once('value', (response) => {\n                    const newData = response.val()\n\n                    for (let key in newData) {\n                        if (key === keyValue) {\n                            dbRef.child(key).child('userList').child(target).update({\n                                value: this.state.displayList[parentDiv].userListObject.userList[target].value\n                            })\n                        }\n                    }\n                })\n            })\n        } else {\n            swal({\n                title: \"Vote count cannot be less than zero\",\n                icon: \"warning\",\n                button: \"Nice.\",\n            });\n        }\n    }\n\n    render(){\n        return(\n            <section className=\"communityList wrapper\" id=\"communityList\">\n                <h2 className=\"communityListTitle\">Community Lists</h2>\n                <div className=\"communityListContent\">\n                    {this.state.displayList.map((list, index) => {\n                        return(\n                            <div \n                                className=\"completeList\" \n                                data-id={index} \n                                data-key={list.id}\n                                key={list.id}>\n                                <h3>{list.userListObject.title}</h3>\n                                <ul>\n                                    {list.userListObject.userList.map((show, index)=> {\n                                        return(\n                                            <li \n                                            key={index} \n                                            className=\"titleVoteContent\">\n                                                <div \n                                                    className=\"showHeading\"\n                                                    style={{backgroundImage: `url(${show.background})`}}>\n                                                    <h4>{show.title}</h4>\n                                                    <div className=\"overlay\"></div>\n                                                </div>\n                                                <div className=\"showRating\">\n                                                    <p>{show.value}</p>\n                                                    <div className=\"votesButton\">\n                                                        <button\n                                                            className=\"upvote\"\n                                                            onClick={this.valueIncrease}\n                                                            value={index}>\n                                                                &#128077; \n                                                        </button>\n                                                        <button\n                                                            className=\"downvote\"\n                                                            onClick={this.valueDecrease}\n                                                            value={index}>\n                                                                &#128078; \n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            </li>\n                                        )\n                                    })}\n                                </ul>\n                            </div>\n                        )\n                    })}\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default Main","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                <div className=\"wrapper footerStyling\">\n                    <div className=\"subFooterStyling subFooterH2\">\n                        <div className=\"footerTextInlineBlock\">\n                            <h2 className=\"footerH2\">Team SuperDuperLatives:\n                            </h2>\n                        </div>\n                        <div className=\"footerTextInlineBlock textH2\">\n                            <p><a href=\"https://github.com/superduperlatives/BingeWatcher.git\">Andrea Maille, Brian Kan, Jeff Yeung, Tommy Lay\n                            </a></p>\n                        </div>\n                    </div>\n\n                    <div className=\"subFooterStyling subFooterLinks\">\n                        <div className=\"footerTextInlineBlock\">\n                            <h2 className=\"footerH2\">Powered By API :</h2>\n                        </div>\n                        <div className=\"footerTextInlineBlock textH2\">\n                            <p><a href=\"http://www.tvmaze.com/api\">TVMAZE</a></p>\n                        </div>\n                    </div>\n                </div>\n            </footer>\n        )\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header.js';\nimport Main from './Main.js';\nimport Footer from './Footer.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Main />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}